name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Enables manual triggering from GitHub

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the application (for Maven-based projects)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 4: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service .
          docker tag ${{ secrets.DOCKER_USERNAME }}/user-service:latest ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      # Step 7: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          # Save the private key from GitHub Secrets
          printf "%s" "${{ secrets.EC2_KEY }}" > ~/decoded-key.pem
          chmod 400 ~/decoded-key.pem

          # SSH into EC2 instance
          ssh -o StrictHostKeyChecking=no -i ~/decoded-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Set environment variables
            SPRING_PROFILES_ACTIVE=prod
            SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}"
            SPRING_DATASOURCE_USERNAME="${{ secrets.POSTGRES_USERNAME }}"
            SPRING_DATASOURCE_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            SPRING_REDIS_HOST="${{ secrets.REDIS_HOST }}"
            SPRING_REDIS_PORT=6379
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            JWT_EXPIRATION_MS="${{ secrets.JWT_EXPIRATION_MS }}"
            JWT_REFRESH_EXPIRATION_MS="${{ secrets.JWT_REFRESH_EXPIRATION_MS }}"

            # Stop and remove existing Docker container if running
            if [ "$(docker ps -aq -f name=user-service)" ]; then
              docker stop user-service
              docker rm user-service
            fi

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/user-service:latest

            # Run the Docker container
            docker run -d --name user-service -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE="$SPRING_PROFILES_ACTIVE" \
              -e SPRING_DATASOURCE_URL="$SPRING_DATASOURCE_URL" \
              -e SPRING_DATASOURCE_USERNAME="$SPRING_DATASOURCE_USERNAME" \
              -e SPRING_DATASOURCE_PASSWORD="$SPRING_DATASOURCE_PASSWORD" \
              -e SPRING_REDIS_HOST="$SPRING_REDIS_HOST" \
              -e SPRING_REDIS_PORT="$SPRING_REDIS_PORT" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e JWT_EXPIRATION_MS="$JWT_EXPIRATION_MS" \
              -e JWT_REFRESH_EXPIRATION_MS="$JWT_REFRESH_EXPIRATION_MS" \
              ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          EOF
